# Clear the environment
rm(list = ls())

# Load required libraries
library(data.table)
library(survival)
library(bujar)

# Set seed for reproducibility
set.seed(7)

# Number of patients
n <- 500

# Function to generate random treatments based on given proportions
assign_treatments <- function(n, proportions) {
  treatments <- c("A", "B", "P")
  sample(treatments, size = n, replace = TRUE, prob = proportions)
}

# Function to generate data and calculate p-values
generate_data_and_pvalues <- function(seed) {
  set.seed(seed)  # Use a different seed for each replication
  
  # Stage 1: Initial treatment assignment and patient data generation
  states_stage1 <- data.table(
    Treatment = assign_treatments(n, c(1/3, 1/3, 1/3)),
    TumorSize = numeric(n),
    Severity = numeric(n),
    survival.month.1st = numeric(n)
  )
  
  # Define Tumor Size and Severity based on treatment in Stage 1
  states_stage1$TumorSize[states_stage1$Treatment == "A"] <- runif(sum(states_stage1$Treatment == "A"), 5, 6)
  states_stage1$TumorSize[states_stage1$Treatment == "B"] <- runif(sum(states_stage1$Treatment == "B"), 3, 4)
  states_stage1$TumorSize[states_stage1$Treatment == "P"] <- runif(sum(states_stage1$Treatment == "P"), 1, 2)
  states_stage1$Severity <- as.numeric(factor(states_stage1$Treatment, levels = c("A", "B", "P"), labels = c(3, 2, 1)))
  
  # Generate survival time for Stage 1
  states_stage1$survival.month.1st <- pmax(20 - 0.5 * states_stage1$TumorSize^2 - 
                                             1.5 * log(states_stage1$Severity + 1), 0.001)
  #states_stage1$survival.month.1st <- pmax(20 - 2*states_stage1$TumorSize - states_stage1$Severity + rnorm(n, 0, 0.5), 0.001)
  
  # Censoring
  Censoring <- runif(n, 0, 20)
  delta <- ifelse(states_stage1$survival.month.1st <= Censoring, 1, 0)
  states_stage1$y <- pmin(states_stage1$survival.month.1st, Censoring)
  states_stage1$delta <- delta
  
  # 1. Buckley-James AFT model
  bjaft <- function(dt, tol = 1e-3, max.iter = 100) {
    Y <- dt$y
    delta <- dt$delta
    x <- cbind(dt$TumorSize, dt$Severity)
    old.beta <- lm(log(Y) ~ x)$coef[-1]
    
    err <- 10
    iter <- 0
    while (max.iter > iter & err > tol) {
      xbeta <- c(x %*% old.beta)
      e <- log(Y) - xbeta
      es <- sort(e)
      sfit <- survfit(Surv(e, delta) ~ 1)
      Fhat <- 1 - approx(x = sfit$time, y = sfit$surv, xout = es)$y
      dF <- diff(c(0, Fhat))
      denom <- 1 - Fhat
      num <- rev(cumsum(rev(es * dF)))
      Yimp <- (num / pmax(tol, denom))[rank(e)] + xbeta
      Yhat <- log(Y) * delta + (1 - delta) * Yimp
      
      new.beta <- lm(Yhat ~ x)$coef[-1]
      err <- max(abs(new.beta - old.beta))
      iter <- iter + 1
      old.beta <- new.beta
    }
    list(Yhat = Yhat)
  }
  
  BJ <- exp(bjaft(states_stage1)$Yhat)
  
  # 2. BJ Twin Boosting
  imputed.y <- bujar(y = log(states_stage1$y), cens = states_stage1$delta, 
                     x = cbind(states_stage1$TumorSize, states_stage1$Severity), 
                     cv = FALSE, mstop = 1000, twin = TRUE, mstop2 = 100)$ynew
  BJLS <- exp(imputed.y)
  
  # 3. BJ Tree
  BJTree <- exp(bujar(y = log(states_stage1$y), cens = states_stage1$delta, 
                      x = states_stage1[, c("TumorSize", "Severity")], 
                      learner = "tree", tuning = TRUE, cv = FALSE, degree = 4, 
                      mstop = 1000, n.cores = 1, rng = 123)$ynew)
  
  # 4. Non-Imputed
  Nonimputed <- states_stage1$y
  
  # Function to calculate p-values
  calculate_p_values <- function(method1, method2, name1, name2) {
    method <- c(rep(name1, n), rep(name2, n))
    time <- c(method1, method2)
    status <- rep(1, length(time))
    data <- data.frame(time = time, status = status, method = method)
    
    fit <- survdiff(Surv(time, status) ~ method, data = data)
    p_value <- 1 - pchisq(fit$chisq, length(fit$n) - 1)
    return(p_value)
  }
  
  # Calculate p-values
  list(
    BJ_vs_True = calculate_p_values(states_stage1$survival.month.1st, BJ, "True", "BJ"),
    BJLS_vs_True = calculate_p_values(states_stage1$survival.month.1st, BJLS, "True", "BJLS"),
    BJTree_vs_True = calculate_p_values(states_stage1$survival.month.1st, BJTree, "True", "BJTree"),
    Nonimputed_vs_True = calculate_p_values(states_stage1$survival.month.1st, Nonimputed, "True", "Nonimputed")
  )
}

# Initialize list to store p-values
p_values <- list()

# Perform 10 replications with different seeds using a for loop
for (i in 1:100) {
  p_values[[i]] <- generate_data_and_pvalues(i)
}

# Convert list of p-values to a data frame for summarization
p_values_df <- do.call(rbind, lapply(p_values, as.data.frame))
colnames(p_values_df) <- c("BJ_vs_True", "BJLS_vs_True", "BJTree_vs_True", "Nonimputed_vs_True")

# Summarize p-values for each method and include Q1 and Q3, rounded to 3 decimal places
summary_p_values <- data.frame(
  Method = colnames(p_values_df),
  Mean = round(colMeans(p_values_df), 3),
  StdDev = round(apply(p_values_df, 2, sd), 3),
  Min = round(apply(p_values_df, 2, min), 3),
  Q1 = round(apply(p_values_df, 2, quantile, probs = 0.25), 3),
  Median = round(apply(p_values_df, 2, quantile, probs = 0.5), 3),
  Q3 = round(apply(p_values_df, 2, quantile, probs = 0.75), 3),
  Max = round(apply(p_values_df, 2, max), 3)
)

# Print summary
print(summary_p_values)

